// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: product.sql

package db

import (
	"context"
	"database/sql"

	"github.com/gobuffalo/nulls"
)

const getRelatedPlatforms = `-- name: GetRelatedPlatforms :many
SELECT products.id product_id, products.product_name, products.product_has_sub, sub_products.id sub_product_id, sub_product_name, merchants.id merchant_id, merchants.merchant_name merchant_name
FROM products
LEFT OUTER JOIN sub_products ON sub_products.product_id = products.id
LEFT OUTER JOIN merchants ON merchants.product_id = products.id
WHERE products.id = $1
`

type GetRelatedPlatformsRow struct {
	ProductID      int64         `json:"product_id"`
	ProductName    string        `json:"product_name"`
	ProductHasSub  bool          `json:"product_has_sub"`
	SubProductID   sql.NullInt64 `json:"sub_product_id"`
	SubProductName nulls.String  `json:"sub_product_name"`
	MerchantID     sql.NullInt64 `json:"merchant_id"`
	MerchantName   nulls.String  `json:"merchant_name"`
}

func (q *Queries) GetRelatedPlatforms(ctx context.Context, id int64) ([]GetRelatedPlatformsRow, error) {
	rows, err := q.db.QueryContext(ctx, getRelatedPlatforms, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetRelatedPlatformsRow{}
	for rows.Next() {
		var i GetRelatedPlatformsRow
		if err := rows.Scan(
			&i.ProductID,
			&i.ProductName,
			&i.ProductHasSub,
			&i.SubProductID,
			&i.SubProductName,
			&i.MerchantID,
			&i.MerchantName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
