// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: reconciliation.sql

package db

import (
	"context"
	"time"
)

const disputeReconciliationMerchant = `-- name: DisputeReconciliationMerchant :exec
WITH join_merchant_dispute AS (
    SELECT t1.id
    FROM merchant_transactions t1
    WHERE t1.transaction_status_id != 2
    AND t1.transaction_status_id != 3
    AND t1.owner_id = $1
    AND t1.created_at BETWEEN $2 AND $3
)
UPDATE merchant_transactions
SET transaction_status_id = 4, updated_at = now()
FROM join_merchant_dispute
WHERE merchant_transactions.id = join_merchant_dispute.id
`

type DisputeReconciliationMerchantParams struct {
	DestinationID string    `json:"destination_id"`
	StartDate     time.Time `json:"start_date"`
	EndDate       time.Time `json:"end_date"`
}

func (q *Queries) DisputeReconciliationMerchant(ctx context.Context, arg DisputeReconciliationMerchantParams) error {
	_, err := q.db.ExecContext(ctx, disputeReconciliationMerchant, arg.DestinationID, arg.StartDate, arg.EndDate)
	return err
}

const disputeReconciliationProduct = `-- name: DisputeReconciliationProduct :exec
WITH join_product_dispute AS (
    SELECT t1.id
    FROM product_transactions t1
    WHERE t1.transaction_status_id != 2
    AND t1.transaction_status_id != 3
    AND t1.owner_id = $1
    AND t1.created_at BETWEEN $2 AND $3
)
UPDATE product_transactions
SET transaction_status_id = 4, updated_at = now()
FROM join_product_dispute
WHERE product_transactions.id = join_product_dispute.id
`

type DisputeReconciliationProductParams struct {
	PlatformID string    `json:"platform_id"`
	StartDate  time.Time `json:"start_date"`
	EndDate    time.Time `json:"end_date"`
}

func (q *Queries) DisputeReconciliationProduct(ctx context.Context, arg DisputeReconciliationProductParams) error {
	_, err := q.db.ExecContext(ctx, disputeReconciliationProduct, arg.PlatformID, arg.StartDate, arg.EndDate)
	return err
}

const matchReconciliationMerchant = `-- name: MatchReconciliationMerchant :exec
WITH join_merchant AS (
    SELECT t1.id
    FROM merchant_transactions t1
    LEFT OUTER JOIN product_transactions t2 ON t1.merchant_transaction_id = t2.product_transaction_id
    WHERE t2.product_transaction_id IS NOT NULL
    AND t1.owner_id = $1
    AND t1.created_at BETWEEN $2 AND $3
    AND t2.created_at BETWEEN $2 AND $3
)
UPDATE merchant_transactions
SET transaction_status_id = 3, updated_at = now()
FROM join_merchant
WHERE merchant_transactions.id = join_merchant.id
`

type MatchReconciliationMerchantParams struct {
	DestinationID string    `json:"destination_id"`
	StartDate     time.Time `json:"start_date"`
	EndDate       time.Time `json:"end_date"`
}

func (q *Queries) MatchReconciliationMerchant(ctx context.Context, arg MatchReconciliationMerchantParams) error {
	_, err := q.db.ExecContext(ctx, matchReconciliationMerchant, arg.DestinationID, arg.StartDate, arg.EndDate)
	return err
}

const matchReconciliationProduct = `-- name: MatchReconciliationProduct :exec
WITH join_product AS (
    SELECT t1.id
    FROM product_transactions t1
    LEFT OUTER JOIN merchant_transactions t2 ON t1.product_transaction_id = t2.merchant_transaction_id
    WHERE t2.merchant_transaction_id IS NOT NULL
    AND t1.owner_id = $1
    AND t1.created_at BETWEEN $2 AND $3
    AND t2.created_at BETWEEN $2 AND $3
)
UPDATE product_transactions
SET transaction_status_id = 3, updated_at = now()
FROM join_product
WHERE product_transactions.id = join_product.id
`

type MatchReconciliationProductParams struct {
	PlatformID string    `json:"platform_id"`
	StartDate  time.Time `json:"start_date"`
	EndDate    time.Time `json:"end_date"`
}

func (q *Queries) MatchReconciliationProduct(ctx context.Context, arg MatchReconciliationProductParams) error {
	_, err := q.db.ExecContext(ctx, matchReconciliationProduct, arg.PlatformID, arg.StartDate, arg.EndDate)
	return err
}
