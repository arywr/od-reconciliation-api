// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: progress_event_type.sql

package db

import (
	"context"
)

const allProgressEventType = `-- name: AllProgressEventType :many
SELECT id, progress_event_type_name, progress_event_type_description, created_at, updated_at, deleted_at
FROM progress_event_types
ORDER BY created_at
OFFSET $1
LIMIT $2
`

type AllProgressEventTypeParams struct {
	Offset int32 `json:"offset"`
	Limit  int32 `json:"limit"`
}

func (q *Queries) AllProgressEventType(ctx context.Context, arg AllProgressEventTypeParams) ([]ProgressEventType, error) {
	rows, err := q.db.QueryContext(ctx, allProgressEventType, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ProgressEventType{}
	for rows.Next() {
		var i ProgressEventType
		if err := rows.Scan(
			&i.ID,
			&i.ProgressEventTypeName,
			&i.ProgressEventTypeDescription,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const createProgressEventType = `-- name: CreateProgressEventType :one
INSERT INTO progress_event_types (
    progress_event_type_name, progress_event_type_description
) VALUES (
    $1, $2
)
RETURNING id, progress_event_type_name, progress_event_type_description, created_at, updated_at, deleted_at
`

type CreateProgressEventTypeParams struct {
	ProgressEventTypeName        string `json:"progress_event_type_name"`
	ProgressEventTypeDescription string `json:"progress_event_type_description"`
}

func (q *Queries) CreateProgressEventType(ctx context.Context, arg CreateProgressEventTypeParams) (ProgressEventType, error) {
	row := q.db.QueryRowContext(ctx, createProgressEventType, arg.ProgressEventTypeName, arg.ProgressEventTypeDescription)
	var i ProgressEventType
	err := row.Scan(
		&i.ID,
		&i.ProgressEventTypeName,
		&i.ProgressEventTypeDescription,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const deleteProgressEventType = `-- name: DeleteProgressEventType :exec
DELETE FROM progress_event_types 
WHERE id = $1
`

func (q *Queries) DeleteProgressEventType(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteProgressEventType, id)
	return err
}

const updateProgressEventType = `-- name: UpdateProgressEventType :one
UPDATE progress_event_types 
SET 
    progress_event_type_name = CASE WHEN $2::text <> '' THEN $2::text ELSE progress_event_type_name END,
    progress_event_type_description = CASE WHEN $3::text <> '' THEN $3::text ELSE progress_event_type_description END,
    updated_at = now()
WHERE id = $1
RETURNING id, progress_event_type_name, progress_event_type_description, created_at, updated_at, deleted_at
`

type UpdateProgressEventTypeParams struct {
	ID                           int64  `json:"id"`
	ProgressEventTypeName        string `json:"progress_event_type_name"`
	ProgressEventTypeDescription string `json:"progress_event_type_description"`
}

func (q *Queries) UpdateProgressEventType(ctx context.Context, arg UpdateProgressEventTypeParams) (ProgressEventType, error) {
	row := q.db.QueryRowContext(ctx, updateProgressEventType, arg.ID, arg.ProgressEventTypeName, arg.ProgressEventTypeDescription)
	var i ProgressEventType
	err := row.Scan(
		&i.ID,
		&i.ProgressEventTypeName,
		&i.ProgressEventTypeDescription,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const viewProgressEventType = `-- name: ViewProgressEventType :one
SELECT id, progress_event_type_name, progress_event_type_description, created_at, updated_at, deleted_at
FROM progress_event_types
WHERE id = $1 LIMIT 1
`

func (q *Queries) ViewProgressEventType(ctx context.Context, id int64) (ProgressEventType, error) {
	row := q.db.QueryRowContext(ctx, viewProgressEventType, id)
	var i ProgressEventType
	err := row.Scan(
		&i.ID,
		&i.ProgressEventTypeName,
		&i.ProgressEventTypeDescription,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}
