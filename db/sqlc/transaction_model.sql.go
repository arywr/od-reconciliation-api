// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: transaction_model.sql

package db

import (
	"context"
)

const getTransactionModel = `-- name: GetTransactionModel :one
SELECT transaction_models.id, transaction_models.name, transaction_models.transaction_id, transaction_models.merchant_transaction_id, transaction_models.channel_transaction_id, transaction_models.channel_code, transaction_models.channel_name, transaction_models.merchant_code, transaction_models.merchant_name, transaction_models.product_code, transaction_models.product_name, transaction_models.transaction_date, transaction_models.transaction_datetime, transaction_models.transaction_amount, transaction_models.settled_amount, transaction_models.transaction_date_format, transaction_models.transaction_datetime_format, transaction_models.row_start_at, transaction_models.file_type
FROM products
JOIN transaction_models ON products.transaction_model_id = transaction_models.id
WHERE products.id = $1::int
`

func (q *Queries) GetTransactionModel(ctx context.Context, platformID int32) (TransactionModel, error) {
	row := q.db.QueryRowContext(ctx, getTransactionModel, platformID)
	var i TransactionModel
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.TransactionID,
		&i.MerchantTransactionID,
		&i.ChannelTransactionID,
		&i.ChannelCode,
		&i.ChannelName,
		&i.MerchantCode,
		&i.MerchantName,
		&i.ProductCode,
		&i.ProductName,
		&i.TransactionDate,
		&i.TransactionDatetime,
		&i.TransactionAmount,
		&i.SettledAmount,
		&i.TransactionDateFormat,
		&i.TransactionDatetimeFormat,
		&i.RowStartAt,
		&i.FileType,
	)
	return i, err
}

const getTransactionModelMerchant = `-- name: GetTransactionModelMerchant :one
SELECT transaction_models.id, transaction_models.name, transaction_models.transaction_id, transaction_models.merchant_transaction_id, transaction_models.channel_transaction_id, transaction_models.channel_code, transaction_models.channel_name, transaction_models.merchant_code, transaction_models.merchant_name, transaction_models.product_code, transaction_models.product_name, transaction_models.transaction_date, transaction_models.transaction_datetime, transaction_models.transaction_amount, transaction_models.settled_amount, transaction_models.transaction_date_format, transaction_models.transaction_datetime_format, transaction_models.row_start_at, transaction_models.file_type
FROM merchants
JOIN transaction_models ON merchants.transaction_model_id = transaction_models.id
WHERE merchants.id = $1::int
`

func (q *Queries) GetTransactionModelMerchant(ctx context.Context, platformID int32) (TransactionModel, error) {
	row := q.db.QueryRowContext(ctx, getTransactionModelMerchant, platformID)
	var i TransactionModel
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.TransactionID,
		&i.MerchantTransactionID,
		&i.ChannelTransactionID,
		&i.ChannelCode,
		&i.ChannelName,
		&i.MerchantCode,
		&i.MerchantName,
		&i.ProductCode,
		&i.ProductName,
		&i.TransactionDate,
		&i.TransactionDatetime,
		&i.TransactionAmount,
		&i.SettledAmount,
		&i.TransactionDateFormat,
		&i.TransactionDatetimeFormat,
		&i.RowStartAt,
		&i.FileType,
	)
	return i, err
}
